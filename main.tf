terraform {
    required_providers {
        google = {
            source = "hashicorp/google"
            version = "6.37.0"
        }
    }
    required_version = "~> 1.5.7"
}

#locals {
#    location = "us-central1"
#}

# This should be supplied from the command line via
# the terraform-<operation>-wrapper.sh one-line (for now) scripts.
# Do not enter interactively

variable "project_id" {
    type = string
}

provider "google" {
    project = var.project_id
}

resource "random_id" "startup_script_bucket_id" {
  byte_length = 8
}

resource "google_storage_bucket" "startup_script_bucket" {
    name = "${random_id.startup_script_bucket_id.hex}-lxml-startup-script-bucket"
#    location = local.location
    location = "us-central1"
    storage_class = "STANDARD"
    force_destroy = true
    # uniform_bucket_level_access disables ACLs, which are only useful
    # in legacy contexts and migrations from AWS
    uniform_bucket_level_access = true
}

resource "google_storage_bucket_object" "startup_script" {
    bucket = google_storage_bucket.startup_script_bucket.name
    name = "lxml-startup-script"
    source = "build_lxml_env.sh"
}

resource "google_compute_region_instance_template" "instance_template" {
    disk {
        # Note: if this template is being used after the end of Debian 12 LTS support on June 30, 2028, this would have to be updated to a later OS
        source_image = "family/debian-12"
        # POTENTIAL BUG
        # I think this is necessary, but I'm not sure
        boot = true
    }

    network_interface {
        network = "default"
    }

    machine_type = "e2-medium"

    # I think the above covers what I need to get by untargetedly reading the Terraform GCP provider docs on GM templates
    # Now I just need to add the non-default settings I wrote in my self notes.
}

# This was generated by and copied out of the console, and must be replaced with a template

resource "google_compute_instance" "instance-20250610-183040" {
  boot_disk {
    #auto_delete = true
    #device_name = "instance-20250610-183040"

    initialize_params {
      image = "projects/debian-cloud/global/images/debian-12-bookworm-v20250513"
      size  = 10
      type  = "pd-balanced"
    }

    mode = "READ_WRITE"
  }

  can_ip_forward      = false
  deletion_protection = false
  enable_display      = false

  labels = {
    goog-ec-src = "vm_add-tf"
  }

  machine_type = "e2-medium"
  name         = "instance-20250610-183040"

  network_interface {
    access_config {
      network_tier = "PREMIUM"
    }

    queue_count = 0
    stack_type  = "IPV4_ONLY"
    subnetwork  = "projects/mediawiki-test-412110/regions/us-central1/subnetworks/default"
  }

  scheduling {
    automatic_restart   = true
    on_host_maintenance = "MIGRATE"
    preemptible         = false
    provisioning_model  = "STANDARD"
  }

  service_account {
    email  = "lxml-libxml2-patch-user@mediawiki-test-412110.iam.gserviceaccount.com"
    scopes = ["https://www.googleapis.com/auth/cloud-platform"]
  }

  shielded_instance_config {
    enable_integrity_monitoring = true
    enable_secure_boot          = false
    enable_vtpm                 = true
  }

  zone = "us-central1-c"
}

# The Cloud Build was a work in progress, but unless we are doing some sort of CI/CD, I don't think it's necessary.
# Just add the file in the Storage resource instead, as above.

## TODO not sure if this needs to be v2 for some reason
#resource "google_cloudbuild_trigger" "copy_to_gcs" {
#    location = local.location
#    build {
#        step {
#            name = "google/cloud-sdk:slim"
#            entrypoint = "gcloud"
#            args = ["storage", "cp", "build_lxml_and_open_python.sh", ]
#            script = [
#                "git clone https://github.com/abepolk/lxml-scripts.git",
#                "gcloud storage cp lxml-scripts/build_lxml_and_open_python.sh gs://${google_storage_bucket.startup_script_bucket.name}"
#            ]
#        }
#    }
#}
